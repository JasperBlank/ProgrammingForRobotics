[0.000000] (-) TimerEvent: {}
[0.000110] (-) JobUnselected: {'identifier': 'ball_detection'}
[0.000135] (-) JobUnselected: {'identifier': 'image_functions_sdfr'}
[0.000154] (-) JobUnselected: {'identifier': 'robot_image_messages'}
[0.000169] (-) JobUnselected: {'identifier': 'ros2_introduction'}
[0.000186] (motion_controller) JobQueued: {'identifier': 'motion_controller', 'dependencies': OrderedDict([('image_functions_sdfr', '/home/lucasjko/sdfr_ws/install/image_functions_sdfr'), ('robot_image_messages', '/home/lucasjko/sdfr_ws/install/robot_image_messages')])}
[0.000233] (motion_controller) JobStarted: {'identifier': 'motion_controller'}
[0.015141] (motion_controller) JobProgress: {'identifier': 'motion_controller', 'progress': 'cmake'}
[0.016521] (motion_controller) JobProgress: {'identifier': 'motion_controller', 'progress': 'build'}
[0.016559] (motion_controller) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/lucasjko/sdfr_ws/build/motion_controller', '--', '-j8', '-l8'], 'cwd': '/home/lucasjko/sdfr_ws/build/motion_controller', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'lucasjko'), ('LC_TIME', 'nl_NL.UTF-8'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/lucasjko/sdfr_ws/install/robot_image_messages/lib:/home/lucasjko/sdfr_ws/install/image_functions_sdfr/lib:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/lucasjko'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('LC_MONETARY', 'nl_NL.UTF-8'), ('SYSTEMD_EXEC_PID', '4733'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('COLCON_PREFIX_PATH', '/home/lucasjko/sdfr_ws/install'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'lucasjko'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'lucasjko'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '1'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/humble/bin:/home/lucasjko/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/lucasjko-G5-5590:@/tmp/.ICE-unix/2022,unix/lucasjko-G5-5590:/tmp/.ICE-unix/2022'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'nl_NL.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/a977fcb4_31e8_4aa7_bdf1_bbc85f1776c2'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':1'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('LC_TELEPHONE', 'nl_NL.UTF-8'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.96'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('ROS_DOMAIN_ID', '100'), ('AMENT_PREFIX_PATH', '/home/lucasjko/sdfr_ws/install/ros2_introduction:/home/lucasjko/sdfr_ws/install/motion_controller:/home/lucasjko/sdfr_ws/install/ball_detection:/home/lucasjko/sdfr_ws/install/robot_image_messages:/home/lucasjko/sdfr_ws/install/image_functions_sdfr:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LC_NAME', 'nl_NL.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'nl_NL.UTF-8'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('LC_IDENTIFICATION', 'nl_NL.UTF-8'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/lucasjko/sdfr_ws/build/motion_controller'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/lucasjko/sdfr_ws/install/robot_image_messages/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'nl_NL.UTF-8'), ('LC_PAPER', 'nl_NL.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/lucasjko/sdfr_ws/install/robot_image_messages:/home/lucasjko/sdfr_ws/install/image_functions_sdfr:/home/lucasjko/sdfr_ws/install/ros2_introduction:/home/lucasjko/sdfr_ws/install/motion_controller:/home/lucasjko/sdfr_ws/install/ball_detection:/opt/ros/humble')]), 'shell': False}
[0.099235] (-) TimerEvent: {}
[0.109143] (motion_controller) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target differential_drive_controller\x1b[0m\n'}
[0.109340] (motion_controller) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target bounding_box_controller\x1b[0m\n'}
[0.129218] (motion_controller) StdoutLine: {'line': b'[ 25%] \x1b[32mBuilding CXX object CMakeFiles/bounding_box_controller.dir/src/bounding_box_controller.cpp.o\x1b[0m\n'}
[0.129541] (motion_controller) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/differential_drive_controller.dir/src/differential_drive_controller.cpp.o\x1b[0m\n'}
[0.199330] (-) TimerEvent: {}
[0.299890] (-) TimerEvent: {}
[0.400164] (-) TimerEvent: {}
[0.500450] (-) TimerEvent: {}
[0.600786] (-) TimerEvent: {}
[0.701096] (-) TimerEvent: {}
[0.801404] (-) TimerEvent: {}
[0.901730] (-) TimerEvent: {}
[1.002067] (-) TimerEvent: {}
[1.102364] (-) TimerEvent: {}
[1.202647] (-) TimerEvent: {}
[1.302930] (-) TimerEvent: {}
[1.403208] (-) TimerEvent: {}
[1.503486] (-) TimerEvent: {}
[1.603759] (-) TimerEvent: {}
[1.704042] (-) TimerEvent: {}
[1.804322] (-) TimerEvent: {}
[1.904598] (-) TimerEvent: {}
[2.004951] (-) TimerEvent: {}
[2.105215] (-) TimerEvent: {}
[2.205549] (-) TimerEvent: {}
[2.305862] (-) TimerEvent: {}
[2.406128] (-) TimerEvent: {}
[2.506447] (-) TimerEvent: {}
[2.606777] (-) TimerEvent: {}
[2.660698] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:4\x1b[m\x1b[K,\n'}
[2.660995] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[2.661136] (motion_controller) StderrLine: {'line': b'/usr/include/c++/11/functional: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_check_arity<void (BoundingBoxController::*)(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >), BoundingBoxController*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.661271] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:768:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_helper<false, void (BoundingBoxController::*)(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >), BoundingBoxController*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.661392] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:789:5:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = void (BoundingBoxController::*)(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >); _BoundArgs = {BoundingBoxController*, const std::_Placeholder<1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.661528] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:5:124:\x1b[m\x1b[K   required from here\n'}
[2.661648] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: Wrong number of arguments for pointer-to-member\n'}
[2.661763] (motion_controller) StderrLine: {'line': b'  755 |       static_assert(_Varargs::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K\n'}
[2.661848] (motion_controller) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K~~~~~\x1b[m\x1b[K\n'}
[2.661963] (motion_controller) StderrLine: {'line': b'  756 | \x1b[01;31m\x1b[K                    ? sizeof...(_BoundArgs) >= _Arity::value + 1\x1b[m\x1b[K\n'}
[2.662084] (motion_controller) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.662227] (motion_controller) StderrLine: {'line': b'  757 | \x1b[01;31m\x1b[K                    : sizeof...(_BoundArgs) == _Arity::value + 1\x1b[m\x1b[K,\n'}
[2.662344] (motion_controller) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.662437] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K(false ? (2 >= (((long unsigned int)std::integral_constant<long unsigned int, 2>::value) + 1)) : (2 == (((long unsigned int)std::integral_constant<long unsigned int, 2>::value) + 1)))\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[2.684282] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid BoundingBoxController::boundingBoxCallback(robot_image_messages::msg::BallOutput_<std::allocator<void> >::ConstSharedPtr, sensor_msgs::msg::Image_<std::allocator<void> >::ConstSharedPtr)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.684546] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:70:31:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kunsigned int\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.684670] (motion_controller) StderrLine: {'line': b'   70 |         for (int row = 0; \x1b[01;35m\x1b[Krow < targetWidth\x1b[m\x1b[K; row++){\n'}
[2.684768] (motion_controller) StderrLine: {'line': b'      |                           \x1b[01;35m\x1b[K~~~~^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.684867] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:71:35:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kunsigned int\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.684975] (motion_controller) StderrLine: {'line': b'   71 |             for (int col = 0; \x1b[01;35m\x1b[Kcol < targetWidth\x1b[m\x1b[K; col++){\n'}
[2.685077] (motion_controller) StderrLine: {'line': b'      |                               \x1b[01;35m\x1b[K~~~~^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.685169] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:72:38:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kunsigned int\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.685279] (motion_controller) StderrLine: {'line': b'   72 |                 if ((row == 0 || \x1b[01;35m\x1b[Krow == targetWidth - 1\x1b[m\x1b[K) && (col == 0 || col == targetWidth - 1)){\n'}
[2.685377] (motion_controller) StderrLine: {'line': b'      |                                  \x1b[01;35m\x1b[K~~~~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.685475] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:72:78:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcomparison of integer expressions of different signedness: \xe2\x80\x98\x1b[01m\x1b[Kint\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kunsigned int\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare\x07-Wsign-compare\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.685576] (motion_controller) StderrLine: {'line': b'   72 |                 if ((row == 0 || row == targetWidth - 1) && (col == 0 || \x1b[01;35m\x1b[Kcol == targetWidth - 1\x1b[m\x1b[K)){\n'}
[2.685669] (motion_controller) StderrLine: {'line': b'      |                                                                          \x1b[01;35m\x1b[K~~~~^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.706905] (-) TimerEvent: {}
[2.807214] (-) TimerEvent: {}
[2.907484] (-) TimerEvent: {}
[3.007765] (-) TimerEvent: {}
[3.108090] (-) TimerEvent: {}
[3.160398] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[3.160681] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[3.161137] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.161313] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.161410] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.161540] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.161642] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.161744] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.161864] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.161966] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.162065] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:6\x1b[m\x1b[K,\n'}
[3.162142] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.162210] (motion_controller) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.162319] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = robot_image_messages::msg::BallOutput_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.162433] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = robot_image_messages::msg::BallOutput_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.162540] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.162638] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.162747] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:5:94:\x1b[m\x1b[K   required from here\n'}
[3.162842] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>::function(std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.162936] (motion_controller) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[3.163026] (motion_controller) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.163120] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[3.163209] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:4\x1b[m\x1b[K,\n'}
[3.163299] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.163388] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.163474] (motion_controller) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[3.163532] (motion_controller) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.163585] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.163640] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[3.163693] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_function.h:60\x1b[m\x1b[K,\n'}
[3.163746] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/functional:49\x1b[m\x1b[K,\n'}
[3.163799] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:4\x1b[m\x1b[K,\n'}
[3.163852] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.163906] (motion_controller) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.163961] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>::_Callable<std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&, std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>, std::__invoke_result<std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&, std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > > > >; _Tp = void; _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164051] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164111] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = robot_image_messages::msg::BallOutput_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164198] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = robot_image_messages::msg::BallOutput_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164272] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164347] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164412] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:5:94:\x1b[m\x1b[K   required from here\n'}
[3.164471] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164527] (motion_controller) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[3.164580] (motion_controller) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.164633] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[3.164686] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:4\x1b[m\x1b[K,\n'}
[3.164740] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.164793] (motion_controller) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.164861] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = robot_image_messages::msg::BallOutput_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.164937] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = robot_image_messages::msg::BallOutput_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165003] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165073] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = robot_image_messages::msg::BallOutput_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<robot_image_messages::msg::BallOutput_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<robot_image_messages::msg::BallOutput_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165146] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:5:94:\x1b[m\x1b[K   required from here\n'}
[3.165201] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165258] (motion_controller) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[3.165325] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.165409] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165470] (motion_controller) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[3.165525] (motion_controller) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.165578] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165641] (motion_controller) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[3.165694] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.165746] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165808] (motion_controller) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[3.165862] (motion_controller) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.165915] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.165971] (motion_controller) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[3.166023] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.166076] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.166132] (motion_controller) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[3.166185] (motion_controller) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.166244] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.166302] (motion_controller) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[3.166394] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.166492] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[3.184360] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[3.184678] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[3.184791] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.184889] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.184983] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.185084] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.185156] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.185225] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.185331] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.185441] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.185546] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:6\x1b[m\x1b[K,\n'}
[3.185653] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.185755] (motion_controller) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.185875] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Image_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::Image_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.186030] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Image_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::Image_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.186160] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Image_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.186272] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::Image_<std::allocator<void> >; CallbackT = std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::Image_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::Image_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.186396] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:6:81:\x1b[m\x1b[K   required from here\n'}
[3.186503] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>::function(std::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.186603] (motion_controller) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[3.186712] (motion_controller) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.186807] (motion_controller) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[3.186905] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/include/motion_controller/bounding_box_controller.hpp:4\x1b[m\x1b[K,\n'}
[3.187002] (motion_controller) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/lucasjko/sdfr_ws/src/motion_controller/src/bounding_box_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.187107] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.187208] (motion_controller) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[3.187315] (motion_controller) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.187430] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.187506] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.187615] (motion_controller) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[3.187719] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.187813] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.187927] (motion_controller) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[3.188026] (motion_controller) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.188144] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.188254] (motion_controller) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[3.188356] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.188450] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.188555] (motion_controller) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[3.188662] (motion_controller) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.188765] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.188866] (motion_controller) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[3.188966] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.189077] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (BoundingBoxController::*(BoundingBoxController*, std::_Placeholder<1>))(std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.189197] (motion_controller) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[3.189302] (motion_controller) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.189397] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {std::shared_ptr<const robot_image_messages::msg::BallOutput_<std::allocator<void> > >, std::shared_ptr<const sensor_msgs::msg::Image_<std::allocator<void> > >}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.189507] (motion_controller) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[3.189609] (motion_controller) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.189710] (motion_controller) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[3.208189] (-) TimerEvent: {}
[3.308486] (-) TimerEvent: {}
[3.408824] (-) TimerEvent: {}
[3.509143] (-) TimerEvent: {}
[3.609470] (-) TimerEvent: {}
[3.709778] (-) TimerEvent: {}
[3.810090] (-) TimerEvent: {}
[3.910352] (-) TimerEvent: {}
[4.010658] (-) TimerEvent: {}
[4.110985] (-) TimerEvent: {}
[4.211291] (-) TimerEvent: {}
[4.311617] (-) TimerEvent: {}
[4.411916] (-) TimerEvent: {}
[4.512216] (-) TimerEvent: {}
[4.612527] (-) TimerEvent: {}
[4.712836] (-) TimerEvent: {}
[4.813166] (-) TimerEvent: {}
[4.913474] (-) TimerEvent: {}
[5.013728] (-) TimerEvent: {}
[5.114006] (-) TimerEvent: {}
[5.214298] (-) TimerEvent: {}
[5.314596] (-) TimerEvent: {}
[5.414913] (-) TimerEvent: {}
[5.515261] (-) TimerEvent: {}
[5.615614] (-) TimerEvent: {}
[5.715911] (-) TimerEvent: {}
[5.816232] (-) TimerEvent: {}
[5.916518] (-) TimerEvent: {}
[6.016836] (-) TimerEvent: {}
[6.107496] (motion_controller) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/bounding_box_controller.dir/build.make:76: CMakeFiles/bounding_box_controller.dir/src/bounding_box_controller.cpp.o] Error 1\n'}
[6.107726] (motion_controller) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:165: CMakeFiles/bounding_box_controller.dir/all] Error 2\n'}
[6.107827] (motion_controller) StderrLine: {'line': b'gmake[1]: *** Waiting for unfinished jobs....\n'}
[6.116903] (-) TimerEvent: {}
[6.217167] (-) TimerEvent: {}
[6.317499] (-) TimerEvent: {}
[6.417875] (-) TimerEvent: {}
[6.518366] (-) TimerEvent: {}
[6.618640] (-) TimerEvent: {}
[6.718905] (-) TimerEvent: {}
[6.819166] (-) TimerEvent: {}
[6.919444] (-) TimerEvent: {}
[7.019670] (-) TimerEvent: {}
[7.119918] (-) TimerEvent: {}
[7.220179] (-) TimerEvent: {}
[7.320472] (-) TimerEvent: {}
[7.420730] (-) TimerEvent: {}
[7.521039] (-) TimerEvent: {}
[7.621274] (-) TimerEvent: {}
[7.721523] (-) TimerEvent: {}
[7.821842] (-) TimerEvent: {}
[7.922099] (-) TimerEvent: {}
[8.022369] (-) TimerEvent: {}
[8.122645] (-) TimerEvent: {}
[8.222912] (-) TimerEvent: {}
[8.323213] (-) TimerEvent: {}
[8.383598] (motion_controller) StdoutLine: {'line': b'[ 75%] \x1b[32m\x1b[1mLinking CXX executable differential_drive_controller\x1b[0m\n'}
[8.423322] (-) TimerEvent: {}
[8.523645] (-) TimerEvent: {}
[8.623948] (-) TimerEvent: {}
[8.724227] (-) TimerEvent: {}
[8.824526] (-) TimerEvent: {}
[8.854477] (motion_controller) StdoutLine: {'line': b'[ 75%] Built target differential_drive_controller\n'}
[8.855972] (motion_controller) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[8.857969] (motion_controller) CommandEnded: {'returncode': 2}
[8.900484] (motion_controller) JobEnded: {'identifier': 'motion_controller', 'rc': 2}
[8.910918] (-) EventReactorShutdown: {}
